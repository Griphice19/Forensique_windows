"""
EventLogs Collector - Module de collecte des journaux d'√©v√©nements Windows
Agent Forensique - Module de collection d'artefacts forensiques
"""

import win32evtlog
import win32api
import win32con
import win32security
import logging
from datetime import datetime, timedelta
from collections import defaultdict, Counter
import json

class EventLogCollector:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.events_data = []
        self.statistics = {}
        self.alerts = []
        
        # Types d'√©v√©nements critiques √† surveiller
        self.critical_events = {
            # Authentification et Sessions
            4624: "Connexion r√©ussie",
            4625: "√âchec de connexion",
            4634: "D√©connexion",
            4647: "D√©connexion initi√©e par l'utilisateur",
            4648: "Tentative de connexion avec identifiants explicites",
            4672: "Privil√®ges sp√©ciaux assign√©s",
            4768: "Ticket Kerberos (TGT) demand√©",
            4769: "Ticket de service Kerberos demand√©",
            4771: "√âchec de pr√©-authentification Kerberos",
            
            # Gestion des comptes
            4720: "Compte utilisateur cr√©√©",
            4722: "Compte utilisateur activ√©",
            4724: "Tentative de r√©initialisation de mot de passe",
            4725: "Compte utilisateur d√©sactiv√©",
            4726: "Compte utilisateur supprim√©",
            4738: "Compte utilisateur modifi√©",
            4781: "Nom de compte modifi√©",
            
            # Groupes et privil√®ges
            4728: "Membre ajout√© √† un groupe de s√©curit√© global",
            4732: "Membre ajout√© √† un groupe de s√©curit√© local",
            4756: "Membre ajout√© √† un groupe de s√©curit√© universel",
            
            # Services et processus
            7034: "Service arr√™t√© de mani√®re inattendue",
            7035: "Service contr√¥l√© avec succ√®s",
            7036: "Service entr√© dans l'√©tat d'arr√™t/d√©marrage",
            7040: "Param√®tres de service modifi√©s",
            4697: "Service install√©",
            
            # Processus
            4688: "Nouveau processus cr√©√©",
            4689: "Processus termin√©",
            
            # Objets et fichiers
            4656: "Handle vers un objet demand√©",
            4658: "Handle vers un objet ferm√©",
            4663: "Tentative d'acc√®s √† un objet",
            
            # PowerShell
            4103: "Ex√©cution de pipeline PowerShell",
            4104: "Ex√©cution de bloc de script PowerShell",
            
            # Nettoyage des logs
            1102: "Journal d'audit effac√©",
            
            # RDP
            1149: "Connexion r√©seau r√©ussie par le Bureau √† distance",
            
            # Syst√©mique
            6005: "D√©marrage du service de journal d'√©v√©nements",
            6006: "Arr√™t du service de journal d'√©v√©nements",
            1074: "Arr√™t/red√©marrage du syst√®me initi√©",
            1076: "Arr√™t/red√©marrage du syst√®me",
        }
        
        # Journaux √† analyser
        self.logs_to_analyze = [
            'Security',
            'System', 
            'Application',
            'Microsoft-Windows-PowerShell/Operational',
            'Microsoft-Windows-TerminalServices-LocalSessionManager/Operational'
        ]

    def collect(self, max_events=1000):
        """Collecte les √©v√©nements des journaux Windows"""
        try:
            self.logger.info("üîç D√©but de la collecte des journaux d'√©v√©nements...")
            
            for log_name in self.logs_to_analyze:
                try:
                    self._collect_from_log(log_name, max_events)
                except Exception as e:
                    self.logger.warning(f"‚ùå Erreur lors de la collecte du journal {log_name}: {e}")
                    
            self._analyze_events()
            self._generate_statistics()
            self._detect_alerts()
            
            self.logger.info(f"‚úÖ Collecte termin√©e: {len(self.events_data)} √©v√©nements collect√©s")
            
            return {
                'events': self.events_data,
                'statistics': self.statistics,
                'alerts': self.alerts,
                'total_events': len(self.events_data)
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de la collecte des √©v√©nements: {e}")
            return None

    def _collect_from_log(self, log_name, max_events):
        """Collecte les √©v√©nements d'un journal sp√©cifique"""
        try:
            # Ouvrir le journal d'√©v√©nements
            hand = win32evtlog.OpenEventLog(None, log_name)
            flags = win32evtlog.EVENTLOG_BACKWARDS_READ | win32evtlog.EVENTLOG_SEQUENTIAL_READ
            
            events_collected = 0
            
            while events_collected < max_events:
                events = win32evtlog.ReadEventLog(hand, flags, 0)
                if not events:
                    break
                    
                for event in events:
                    if events_collected >= max_events:
                        break
                        
                    event_data = self._parse_event(event, log_name)
                    if event_data:
                        self.events_data.append(event_data)
                        events_collected += 1
                        
            win32evtlog.CloseEventLog(hand)
            self.logger.info(f"üìä {log_name}: {events_collected} √©v√©nements collect√©s")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur collecte journal {log_name}: {e}")

    def _parse_event(self, event, log_name):
        """Parse un √©v√©nement Windows en format standardis√©"""
        try:
            # Conversion du timestamp
            timestamp = event.TimeGenerated.Format()
            
            # R√©cup√©ration des informations de base
            event_id = event.EventID & 0xFFFF  # Masquer les bits de facilit√©
            event_type = event.EventType
            source = event.SourceName
            computer = event.ComputerName
            
            # R√©cup√©ration du message et des donn√©es
            try:
                message = win32evtlogutil.SafeFormatMessage(event, log_name)
            except:
                message = "Message non disponible"
                
            # Informations utilisateur si disponibles
            username = None
            if event.Sid:
                try:
                    username = win32security.LookupAccountSid(None, event.Sid)[0]
                except:
                    username = str(event.Sid)
            
            # D√©terminer si c'est un √©v√©nement critique
            is_critical = event_id in self.critical_events
            event_description = self.critical_events.get(event_id, "√âv√©nement standard")
            
            return {
                'timestamp': timestamp,
                'log_name': log_name,
                'event_id': event_id,
                'event_type': event_type,
                'source': source,
                'computer': computer,
                'username': username,
                'message': message,
                'is_critical': is_critical,
                'description': event_description,
                'raw_data': list(event.StringInserts) if event.StringInserts else []
            }
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Erreur parsing √©v√©nement: {e}")
            return None

    def _analyze_events(self):
        """Analyse les √©v√©nements collect√©s pour identifier les patterns"""
        try:
            # Analyse temporelle - activit√© r√©cente (24h)
            now = datetime.now()
            recent_threshold = now - timedelta(hours=24)
            
            recent_events = []
            for event in self.events_data:
                try:
                    event_time = datetime.strptime(event['timestamp'], '%m/%d/%y %H:%M:%S')
                    if event_time >= recent_threshold:
                        recent_events.append(event)
                except:
                    continue
                    
            # Timeline des √©v√©nements critiques
            critical_timeline = []
            for event in self.events_data:
                if event['is_critical']:
                    critical_timeline.append({
                        'time': event['timestamp'],
                        'event_id': event['event_id'],
                        'description': event['description'],
                        'username': event['username'],
                        'source': event['source']
                    })
            
            # Tri par timestamp (plus r√©cents en premier)
            critical_timeline.sort(key=lambda x: x['time'], reverse=True)
            
            self.analysis = {
                'recent_activity': {
                    'total_recent_events': len(recent_events),
                    'critical_recent_events': len([e for e in recent_events if e['is_critical']])
                },
                'critical_timeline': critical_timeline[:50]  # Top 50 √©v√©nements critiques
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur analyse √©v√©nements: {e}")

    def _generate_statistics(self):
        """G√©n√®re des statistiques d√©taill√©es"""
        try:
            # Compteurs g√©n√©raux
            total_events = len(self.events_data)
            critical_events = len([e for e in self.events_data if e['is_critical']])
            
            # Statistiques par journal
            log_stats = Counter([e['log_name'] for e in self.events_data])
            
            # Statistiques par type d'√©v√©nement
            event_type_stats = Counter([e['event_type'] for e in self.events_data])
            
            # Top √©v√©nements critiques
            critical_event_stats = Counter([
                f"{e['event_id']} - {e['description']}" 
                for e in self.events_data if e['is_critical']
            ])
            
            # Top utilisateurs actifs
            user_stats = Counter([
                e['username'] for e in self.events_data 
                if e['username'] and e['username'] != 'N/A'
            ])
            
            # Top sources d'√©v√©nements
            source_stats = Counter([e['source'] for e in self.events_data])
            
            self.statistics = {
                'summary': {
                    'total_events': total_events,
                    'critical_events': critical_events,
                    'critical_percentage': round((critical_events/total_events)*100, 2) if total_events > 0 else 0
                },
                'by_log': dict(log_stats.most_common(10)),
                'by_event_type': dict(event_type_stats.most_common()),
                'top_critical_events': dict(critical_event_stats.most_common(15)),
                'top_users': dict(user_stats.most_common(10)),
                'top_sources': dict(source_stats.most_common(10))
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur g√©n√©ration statistiques: {e}")

    def _detect_alerts(self):
        """D√©tecte les √©v√©nements suspects et g√©n√®re des alertes"""
        try:
            self.alerts = []
            
            # D√©tection de nettoyage de logs
            log_clearing_events = [e for e in self.events_data if e['event_id'] == 1102]
            if log_clearing_events:
                self.alerts.append({
                    'severity': 'HIGH',
                    'type': 'Log Clearing Detected',
                    'description': f"{len(log_clearing_events)} √©v√©nement(s) de nettoyage de logs d√©tect√©(s)",
                    'events': log_clearing_events[:5]  # Top 5
                })
            
            # Multiple √©checs de connexion
            failed_logins = [e for e in self.events_data if e['event_id'] == 4625]
            if len(failed_logins) > 10:
                self.alerts.append({
                    'severity': 'MEDIUM',
                    'type': 'Multiple Failed Logins',
                    'description': f"{len(failed_logins)} √©checs de connexion d√©tect√©s",
                    'count': len(failed_logins)
                })
            
            # Privil√®ges sp√©ciaux fr√©quents
            privilege_events = [e for e in self.events_data if e['event_id'] == 4672]
            if len(privilege_events) > 5:
                self.alerts.append({
                    'severity': 'MEDIUM',
                    'type': 'Frequent Privilege Usage',
                    'description': f"{len(privilege_events)} utilisations de privil√®ges sp√©ciaux",
                    'count': len(privilege_events)
                })
            
            # Services arr√™t√©s de mani√®re inattendue
            unexpected_service_stops = [e for e in self.events_data if e['event_id'] == 7034]
            if unexpected_service_stops:
                self.alerts.append({
                    'severity': 'MEDIUM',
                    'type': 'Unexpected Service Stops',
                    'description': f"{len(unexpected_service_stops)} arr√™t(s) inattendu(s) de service",
                    'events': unexpected_service_stops[:3]
                })
            
            # Nouveaux comptes cr√©√©s
            new_accounts = [e for e in self.events_data if e['event_id'] == 4720]
            if new_accounts:
                self.alerts.append({
                    'severity': 'LOW',
                    'type': 'New User Accounts',
                    'description': f"{len(new_accounts)} nouveau(x) compte(s) utilisateur cr√©√©(s)",
                    'events': new_accounts
                })
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur d√©tection alertes: {e}")

    def get_forensic_summary(self):
        """Retourne un r√©sum√© forensique des d√©couvertes"""
        try:
            summary = {
                'collection_timestamp': datetime.now().isoformat(),
                'total_events_analyzed': len(self.events_data),
                'critical_events_found': len([e for e in self.events_data if e['is_critical']]),
                'alerts_generated': len(self.alerts),
                'logs_analyzed': list(set([e['log_name'] for e in self.events_data])),
                'analysis_period': 'Last 1000 events per log',
                'key_findings': [],
                'recommendations': []
            }
            
            # Recommandations bas√©es sur l'analyse
            if any(alert['type'] == 'Log Clearing Detected' for alert in self.alerts):
                summary['recommendations'].append("üö® Nettoyage de logs d√©tect√© - Enqu√™te approfondie recommand√©e")
                
            if len([e for e in self.events_data if e['event_id'] == 4625]) > 10:
                summary['recommendations'].append("üîê Nombreux √©checs de connexion - V√©rifier les tentatives de brute force")
                
            if len([e for e in self.events_data if e['event_id'] == 4688]) > 100:
                summary['recommendations'].append("‚ö° Activit√© processus √©lev√©e - Analyser les nouveaux processus")
                
            # Findings cl√©s
            for alert in self.alerts[:5]:  # Top 5 alertes
                summary['key_findings'].append(f"{alert['severity']}: {alert['description']}")
            
            return summary
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur g√©n√©ration r√©sum√©: {e}")
            return None

# Import n√©cessaire pour le formatage des messages
try:
    import win32evtlogutil
except ImportError:
    # Fallback si win32evtlogutil n'est pas disponible
    class MockWin32EvtLogUtil:
        @staticmethod
        def SafeFormatMessage(event, log_name):
            return "Message formatting not available"
    
    win32evtlogutil = MockWin32EvtLogUtil()

if __name__ == "__main__":
    # Test du module
    collector = EventLogCollector()
    results = collector.collect(max_events=100)
    
    if results:
        print(f"‚úÖ Collecte termin√©e: {results['total_events']} √©v√©nements")
        print(f"üö® Alertes g√©n√©r√©es: {len(results['alerts'])}")
        
        # Affichage des statistiques
        print("\nüìä STATISTIQUES:")
        for category, stats in results['statistics'].items():
            print(f"\n{category.upper()}:")
            if isinstance(stats, dict):
                for key, value in list(stats.items())[:5]:  # Top 5
                    print(f"  {key}: {value}")
    else:
        print("‚ùå √âchec de la collecte")