#!/usr/bin/env python3
"""
Agent Forensique Windows - Point d'entr√©e principal
Collecte et analyse des artefacts syst√®me pour investigation forensique
"""

import sys
import os
import time
import logging
import argparse
from datetime import datetime
from pathlib import Path

# Configuration du logging
def setup_logging():
    """Configure le syst√®me de logging"""
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    logging.basicConfig(
        level=logging.INFO,
        format=log_format,
        handlers=[
            logging.FileHandler('forensic_agent.log'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    return logging.getLogger('ForensicAgent')

class ForensicAgent:
    """Agent principal de collecte forensique"""
    
    def __init__(self):
        self.logger = setup_logging()
        self.version = "1.0.0"
        self.start_time = datetime.now()
        self.data_collected = {}
        
        self.logger.info(f"üöÄ Agent Forensique Windows v{self.version} - D√©marrage")
        self.logger.info(f"üìÖ Session d√©marr√©e: {self.start_time}")
    
    def check_privileges(self):
        """V√©rifie si l'agent s'ex√©cute avec les privil√®ges administrateur"""
        try:
            import ctypes
            is_admin = ctypes.windll.shell32.IsUserAnAdmin()
            if is_admin:
                self.logger.info("‚úÖ Privil√®ges administrateur d√©tect√©s")
                return True
            else:
                self.logger.warning("‚ö†Ô∏è  Privil√®ges administrateur requis pour certaines fonctions")
                return False
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de la v√©rification des privil√®ges: {e}")
            return False
    
    def initialize_collectors(self):
        """Initialise tous les modules de collecte"""
        self.logger.info("üîß Initialisation des modules de collecte...")
        
        try:
            from core.collector import DataCollector
            from core.eventlogs import EventLogCollector
            from core.registry import RegistryCollector
            from core.network import NetworkCollector
            from core.browser import BrowserCollector
            from core.usb import USBCollector
            
            self.collectors = {
                'main': DataCollector(),
                'eventlogs': EventLogCollector(),
                'registry': RegistryCollector(),
                'network': NetworkCollector(),
                'browser': BrowserCollector(),
                'usb': USBCollector()
            }
            
            self.logger.info(f"‚úÖ {len(self.collectors)} modules de collecte initialis√©s")
            return True
            
        except ImportError as e:
            self.logger.error(f"‚ùå Erreur d'import des modules: {e}")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de l'initialisation: {e}")
            return False
    
    def collect_artifacts(self):
        """Lance la collecte de tous les artefacts"""
        self.logger.info("üîç D√©but de la collecte des artefacts...")
        
        collection_results = {}
        
        for name, collector in self.collectors.items():
            try:
                self.logger.info(f"üìä Collecte {name}...")
                start_time = time.time()
                
                data = collector.collect()
                elapsed_time = time.time() - start_time
                
                collection_results[name] = {
                    'data': data,
                    'timestamp': datetime.now().isoformat(),
                    'duration': round(elapsed_time, 2),
                    'status': 'success',
                    'items_count': len(data) if isinstance(data, (list, dict)) else 1
                }
                
                self.logger.info(f"‚úÖ {name}: {collection_results[name]['items_count']} √©l√©ments collect√©s en {elapsed_time:.2f}s")
                
            except Exception as e:
                self.logger.error(f"‚ùå Erreur lors de la collecte {name}: {e}")
                collection_results[name] = {
                    'data': None,
                    'timestamp': datetime.now().isoformat(),
                    'status': 'error',
                    'error': str(e)
                }
        
        self.data_collected = collection_results
        return collection_results
    
    def generate_report(self):
        """G√©n√®re un rapport de collecte"""
        self.logger.info("üìù G√©n√©ration du rapport de collecte...")
        
        total_items = sum(
            result.get('items_count', 0) 
            for result in self.data_collected.values() 
            if result.get('status') == 'success'
        )
        
        successful_collections = sum(
            1 for result in self.data_collected.values() 
            if result.get('status') == 'success'
        )
        
        end_time = datetime.now()
        total_duration = (end_time - self.start_time).total_seconds()
        
        report = {
            'session_info': {
                'version': self.version,
                'start_time': self.start_time.isoformat(),
                'end_time': end_time.isoformat(),
                'total_duration': round(total_duration, 2)
            },
            'collection_summary': {
                'total_modules': len(self.collectors),
                'successful_modules': successful_collections,
                'failed_modules': len(self.collectors) - successful_collections,
                'total_artifacts': total_items
            },
            'detailed_results': self.data_collected
        }
        
        self.logger.info(f"üìä Rapport g√©n√©r√©: {total_items} artefacts collect√©s en {total_duration:.2f}s")
        return report
    
    def save_data(self, report):
        """Sauvegarde les donn√©es collect√©es"""
        try:
            import json
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"forensic_data_{timestamp}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False, default=str)
            
            self.logger.info(f"üíæ Donn√©es sauvegard√©es: {filename}")
            return filename
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de la sauvegarde: {e}")
            return None
    
    def run(self):
        """Lance l'ex√©cution compl√®te de l'agent"""
        try:
            # V√©rification des privil√®ges
            self.check_privileges()
            
            # Initialisation des collecteurs
            if not self.initialize_collectors():
                self.logger.error("‚ùå Impossible d'initialiser les modules de collecte")
                return False
            
            # Collecte des artefacts
            self.collect_artifacts()
            
            # G√©n√©ration du rapport
            report = self.generate_report()
            
            # Sauvegarde
            filename = self.save_data(report)
            
            self.logger.info("üéâ Collecte forensique termin√©e avec succ√®s!")
            if filename:
                self.logger.info(f"üìÅ Fichier de donn√©es: {filename}")
            
            return True
            
        except KeyboardInterrupt:
            self.logger.info("‚è∏Ô∏è  Arr√™t demand√© par l'utilisateur")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Erreur critique: {e}")
            return False

def main():
    """Point d'entr√©e principal"""
    parser = argparse.ArgumentParser(description='Agent Forensique Windows')
    parser.add_argument('--version', action='version', version='ForensicAgent 1.0.0')
    parser.add_argument('--verbose', '-v', action='store_true', help='Mode verbeux')
    
    args = parser.parse_args()
    
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    # Cr√©ation et lancement de l'agent
    agent = ForensicAgent()
    success = agent.run()
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()